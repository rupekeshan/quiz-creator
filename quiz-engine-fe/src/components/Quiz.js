import {
  Button,
  Card,
  Checkbox,
  Col,
  Divider,
  Empty,
  Layout,
  notification,
  Radio,
  Row,
  Typography,
} from "antd";
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import QuizService from "../service/quizService";

const { Content } = Layout;

const sad = (
  <svg
    width="123"
    height="114"
    viewBox="0 0 123 114"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M123 56.9996C123 88.4803 101.447 113.965 61.5 114C20.8817 114.035 0 88.4803 0 56.9996C0 25.5196 27.5335 -5.87531e-05 61.5 -5.87531e-05C95.4664 -5.87531e-05 123 25.5196 123 56.9996Z"
      fill="#F9AC0C"
    />
    <path
      d="M102.768 96.3481C62.1492 96.3848 41.2676 70.8292 41.2676 39.3484C41.2676 24.1305 47.7018 10.3057 58.1876 0.0830603C25.7616 1.67726 0 26.5498 0 56.9996C0 88.4803 20.8817 114.035 61.5 114C82.1899 113.981 97.9301 107.126 108.314 96.1562C106.502 96.2712 104.661 96.3467 102.768 96.3481"
      fill="#F8A40D"
    />
    <path
      d="M82.6516 104.375C42.0332 104.411 21.1501 78.8549 21.1501 47.3741C21.1501 28.8334 30.7057 12.3628 45.4955 1.95302C19.2911 8.48223 0 30.6514 0 56.9996C0 88.4803 20.8817 114.035 61.5 114C78.0561 113.985 91.44 109.589 101.454 102.218C95.7266 103.607 89.4624 104.368 82.6516 104.375Z"
      fill="#F7980F"
    />
    <path
      d="M61.4546 60.3972C64.5082 60.4035 70.7696 60.6986 77.0275 64.6713C82.6319 68.231 86.5154 74.0737 84.8195 75.3609C82.6019 77.039 74.3838 68.7548 61.4546 68.752C48.5253 68.7548 40.3086 77.039 38.0911 75.3609C36.3958 74.0737 40.2786 68.231 45.8831 64.6713C52.1389 60.6986 58.4009 60.4035 61.4546 60.3972"
      fill="#100F0D"
    />
    <path
      d="M27.558 30.262C25.5176 30.262 24.2017 30.0493 24.1557 30.0402C23.0685 29.8518 22.3426 28.8243 22.5323 27.7449C22.7199 26.6676 23.7526 25.9435 24.837 26.1306C25.4172 26.2283 39.0912 28.3823 45.3156 16.2689C45.817 15.2934 47.0192 14.9061 47.9997 15.4042C48.9836 15.9031 49.3741 17.0975 48.8713 18.0737C43.3763 28.771 32.9407 30.262 27.558 30.262Z"
      fill="#100F0D"
    />
    <path
      d="M95.4448 30.262C90.0607 30.262 79.6265 28.7737 74.128 18.0737C73.6252 17.0968 74.0164 15.9031 74.9997 15.4042C75.9815 14.9061 77.1844 15.2941 77.6858 16.2689C83.9102 28.3823 97.5856 26.2276 98.1644 26.1306C99.2488 25.947 100.281 26.671 100.468 27.7491C100.655 28.8278 99.9294 29.8518 98.845 30.0402C98.799 30.0493 97.4817 30.262 95.4448 30.262"
      fill="#100F0D"
    />
    <path
      d="M27.6178 56.9636C26.9378 56.9636 26.2747 56.6186 25.9016 55.9971C25.3347 55.0556 25.6457 53.8383 26.5906 53.2764L41.3845 44.4962L26.8605 38.6009C25.8389 38.1866 25.3486 37.0275 25.7684 36.0125C26.1833 34.9982 27.3493 34.5139 28.3723 34.9268L46.5971 42.3269C47.2972 42.6103 47.7763 43.2629 47.8335 44.014C47.8906 44.7636 47.5148 45.48 46.8663 45.8659L28.6393 56.683C28.3179 56.8728 27.9664 56.9636 27.6178 56.9636"
      fill="#100F0D"
    />
    <path
      d="M95.2933 56.9636C95.9725 56.9636 96.6349 56.6186 97.0094 55.9971C97.5756 55.0556 97.2667 53.8383 96.3197 53.2764L81.5265 44.4962L96.0506 38.6009C97.0708 38.1866 97.561 37.0275 97.144 36.0125C96.727 34.9982 95.561 34.5139 94.5401 34.9268L76.3139 42.3269C75.6138 42.6103 75.1347 43.2629 75.0782 44.014C75.0197 44.7636 75.3948 45.48 76.0441 45.8659L94.2717 56.683C94.5918 56.8728 94.9446 56.9636 95.2933 56.9636Z"
      fill="#100F0D"
    />
    <path
      d="M46.1619 63.9882C45.3474 62.1217 44.6347 60.2005 44.0225 58.228C48.2183 58.8904 50.9854 60.0238 50.9854 61.3111C50.9854 61.7032 50.728 62.0808 50.2532 62.4356C49.4617 62.7522 48.657 63.118 47.8473 63.5392C47.3369 63.6999 46.7735 63.8503 46.1619 63.9882"
      fill="#F78E11"
    />
    <path
      d="M35.4504 65.0081C30.4401 65.0081 25.9841 64.4434 23.1425 63.5677C22.7868 62.1903 22.4786 60.7915 22.2178 59.3733C24.9534 58.3181 29.8571 57.6149 35.4504 57.6149C38.6191 57.6149 41.566 57.8408 44.0227 58.228C44.635 60.2005 45.3477 62.1217 46.1622 63.9882C43.3749 64.6201 39.603 65.0081 35.4504 65.0081"
      fill="#F68712"
    />
    <path
      d="M23.1423 63.5675C21.1179 62.9433 19.9143 62.1604 19.9143 61.311C19.9143 60.6008 20.7574 59.9371 22.2176 59.3731C22.4784 60.7913 22.7866 62.1902 23.1423 63.5675Z"
      fill="#F57B14"
    />
    <path
      d="M47.8474 63.5392C48.657 63.1179 49.4617 62.7522 50.2532 62.4355C49.7142 62.8381 48.8934 63.2101 47.8474 63.5392Z"
      fill="#100F0D"
    />
    <path
      d="M85.4505 65.0081C82.1054 65.0081 79.0071 64.7566 76.4723 64.3284C74.2332 62.9829 72.0059 62.0968 69.9383 61.5127C69.923 61.4455 69.9153 61.379 69.9153 61.3111C69.9153 59.2701 76.8712 57.6149 85.4505 57.6149C94.0305 57.6149 100.986 59.2701 100.986 61.3111C100.986 63.3529 94.0305 65.0081 85.4505 65.0081"
      fill="#F78E11"
    />
    <path
      d="M76.4723 64.3284C72.7199 63.6951 70.2004 62.6753 69.9382 61.5127C72.0058 62.0968 74.2331 62.9829 76.4723 64.3284Z"
      fill="#100F0D"
    />
  </svg>
);
const smile = (
  <svg
    width="123"
    height="115"
    viewBox="0 0 123 115"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M123 57.3524C123 89.0286 101.446 114.672 61.501 114.708C20.8829 114.743 0 89.0286 0 57.3524C0 25.6776 27.5328 1.7916e-05 61.501 1.7916e-05C95.4658 1.7916e-05 123 25.6776 123 57.3524"
      fill="#F9CF13"
    />
    <path
      d="M92.6849 7.92301C104.958 18.4089 112.659 33.4758 112.659 50.223C112.659 81.8992 91.1035 107.542 51.1571 107.578C37.9497 107.589 26.841 104.864 17.8455 100.108C28.0776 109.196 42.663 114.725 61.501 114.708C101.446 114.673 123 89.0286 123 57.3524C123 36.2945 110.823 17.898 92.6849 7.92301"
      fill="#F2B20F"
    />
    <path
      d="M9.28642 48.1738C9.28642 48.1738 9.26436 47.9828 9.22574 47.6257C9.20643 47.2733 9.13815 46.7438 9.13815 46.086C9.12573 45.4227 9.09745 44.6084 9.134 43.6838C9.14159 42.7502 9.3347 41.7498 9.49609 40.6287C9.69127 39.5186 9.88439 38.2926 10.2858 37.0702C10.6817 35.847 11.041 34.5121 11.6189 33.229C11.89 32.576 12.2052 31.932 12.5134 31.2736C12.8224 30.6123 13.1293 29.9415 13.5293 29.3168C14.2901 28.046 15.0377 26.7284 15.955 25.53C16.8709 24.3324 17.7737 23.123 18.8165 22.0626C19.7958 20.949 20.8731 19.9575 21.9414 19.0364C22.987 18.0924 24.1277 17.3147 25.1691 16.5617C26.2692 15.8674 27.292 15.2089 28.3155 14.709C29.3189 14.1864 30.2755 13.7686 31.1404 13.4404C31.9956 13.0998 32.7929 12.8888 33.4288 12.7061C34.7247 12.3599 35.5102 12.3062 35.5102 12.3062C35.5102 12.3062 35.3957 12.462 35.1826 12.7564C34.9605 13.0274 34.6764 13.4804 34.2764 13.9775C33.5219 14.9828 32.4432 16.4204 31.1487 18.1455C30.5169 18.9695 29.8307 19.8637 29.1052 20.8083C28.3989 21.7419 27.6554 22.7272 26.885 23.7463C26.5174 24.2641 26.1202 24.7681 25.7188 25.2756C25.336 25.7962 24.9477 26.3243 24.556 26.8552C23.7518 27.8991 22.9787 28.9851 22.2014 30.0683C21.3504 31.1012 20.6903 32.263 19.8724 33.2993C19.0992 34.3673 18.4082 35.4636 17.6468 36.4813C16.8957 37.5052 16.2667 38.5574 15.5632 39.5117C14.8384 40.4604 14.2659 41.4181 13.6542 42.2814C13.0686 43.1536 12.4217 43.9265 11.9548 44.6588C11.4706 45.3862 10.9899 46.0109 10.6072 46.5349C10.232 47.0637 9.87059 47.4636 9.65403 47.7457C9.41264 48.0249 9.28642 48.1738 9.28642 48.1738"
      fill="#FADE45"
    />
    <path
      d="M72.3896 46.5336C72.3896 43.0399 72.3896 45.7393 72.3896 42.2456C72.3896 36.8062 76.2891 32.3796 81.8575 32.2686C87.4274 32.1555 91.3262 36.9751 91.3262 42.2456C91.3262 45.7393 91.3262 43.0399 91.3262 46.5336C91.3262 50.0756 96.8167 50.0756 96.8167 46.5336C96.8167 42.8682 96.8167 45.3987 96.8167 41.7326C96.8167 33.4704 89.9937 26.9415 81.8575 26.7761C73.5952 26.6092 67.059 33.7241 66.8963 41.7326C66.8232 45.3952 66.8963 42.8703 66.8963 46.5336C66.8963 50.0756 72.3896 50.0756 72.3896 46.5336"
      fill="#100F0D"
    />
    <path
      d="M38.2194 43.1729C38.2194 46.4963 35.5234 49.1902 32.2006 49.1902C28.8777 49.1902 26.1824 46.4963 26.1824 43.1729V32.7898C26.1824 29.4671 28.8777 26.7732 32.2006 26.7732C35.5234 26.7732 38.2194 29.4671 38.2194 32.7898V43.1729"
      fill="#100F0D"
    />
    <path
      d="M29.5183 71.4961C31.3584 76.3667 35.1682 80.4423 39.2629 83.5168C48.5308 90.4718 61.7265 91.7356 72.7207 89.0052C78.9803 87.4518 84.8695 84.0346 89.0117 79.0537C90.8559 76.8349 92.576 74.2706 93.4719 71.4961C94.5078 68.2858 89.4696 66.9233 88.4406 70.1095C88.4137 70.1936 88.3813 70.2757 88.353 70.3577C88.3151 70.4577 88.2765 70.5549 88.2372 70.6563C88.0786 71.0445 88.5751 69.8847 88.2613 70.5853C87.8524 71.5078 87.3592 72.3911 86.8268 73.2446C86.4778 73.8038 86.1019 74.3472 85.7088 74.8774C85.6323 74.9822 85.2481 75.4717 85.675 74.9263C85.5605 75.0739 85.4391 75.2194 85.3212 75.3649C85.0288 75.722 84.7226 76.0674 84.4115 76.4101C83.0901 77.8588 81.7135 79.0192 80.4714 79.8852C71.6807 86.0266 58.8774 86.5437 48.8053 82.8259C44.2175 81.1325 40.4498 78.3793 37.2814 74.492C37.1966 74.3872 36.8062 73.8859 37.2428 74.4533C37.1028 74.2727 36.969 74.0907 36.8331 73.9045C36.5855 73.5646 36.3469 73.2178 36.1138 72.8661C35.7351 72.2945 35.3848 71.7064 35.0606 71.1058C34.8585 70.7376 34.6668 70.3591 34.493 69.9751C34.1958 69.3221 34.7558 70.657 34.5482 70.1095C34.0461 68.7808 32.8068 67.8838 31.3398 68.2878C30.0653 68.6388 29.0149 70.1647 29.5183 71.4961"
      fill="#100F0D"
    />
  </svg>
);

function Quiz() {
  const { id } = useParams();
  const [quiz, setQuiz] = useState();
  const [answer, setAnswer] = useState({});
  const [error, setError] = useState("");
  const [quizResult, setQuizResult] = useState(null);

  useEffect(() => {
    QuizService.view(id)
      .then((result) => {
        if (result.data.result) {
          setQuiz(result.data.result);
          const questionArray = {};
          result.data.result.questions.forEach((q) => {
            questionArray[q._id] = [];
          });
          setAnswer(questionArray);
        }
      })
      .catch((e) => {
        notification.open({
          type: "error",
          message: e.response.data.message,
        });
        setError(e.response.data.message);
      });
  }, [id]);

  function onOptionRadioChange(event, question) {
    const tempAnswer = { ...answer };
    if (Array.isArray(event)) {
      tempAnswer[question._id] = event;
    } else tempAnswer[question._id] = [event.target.value];
    setAnswer(tempAnswer);
  }

  function submit() {
    const submitData = { quizId: id, questions: [] };
    Object.entries(answer).forEach((ans) => {
      submitData.questions.push({ _id: ans[0], answer: ans[1] });
    });
    QuizService.check(submitData)
      .then((result) => {
        setQuizResult(result.data.result);
      })
      .catch((e) => {
        notification.open({
          type: "error",
          message: e.response.data.message,
        });
        setError(e.response.data.message);
      });
  }

  function clearAll() {
    const questionArray = {};
    quiz.questions.forEach((q) => {
      questionArray[q._id] = [];
    });
    setAnswer(questionArray);
    setQuizResult(null);
  }

  return (
    <div
      style={{
        backgroundColor: "white",
        padding: "10px 25px",
        marginBottom: "25px",
        height: "100%",
      }}
    >
      {quiz && !quizResult && (
        <React.Fragment>
          <Card className="quiz-question">
            <Row align="middle" className="justify-content-between">
              <Typography.Title level={4}>{quiz.title}</Typography.Title>
              <Button type="primary" onClick={submit}>
                Submit
              </Button>
            </Row>
          </Card>
          {quiz.questions.length &&
            quiz.questions.map((elem, index) => (
              <Card key={index} className="quiz-question">
                <div style={{ wordBreak: "break-word", fontWeight: 500 }}>
                  {index + 1 + ". " + elem.question}
                </div>
                <Divider></Divider>
                {!elem.multi && (
                  <Radio.Group
                    size="large"
                    onChange={($event) => onOptionRadioChange($event, elem)}
                  >
                    {elem.options.length &&
                      elem.options.map((opt, index) => (
                        <Radio
                          key={index}
                          value={opt._id}
                          style={{ wordBreak: "break-word" }}
                        >
                          {opt.text}
                        </Radio>
                      ))}
                  </Radio.Group>
                )}
                {elem.multi && (
                  <Checkbox.Group
                    size="large"
                    onChange={($event) => onOptionRadioChange($event, elem)}
                  >
                    {elem.options.length &&
                      elem.options.map((opt, index) => (
                        <Row key={index}>
                          <Col style={{ width: "25px" }}>
                            <Checkbox key={index} value={opt._id}></Checkbox>
                          </Col>
                          <Col span={20}>{opt.text}</Col>
                        </Row>
                      ))}
                  </Checkbox.Group>
                )}
              </Card>
            ))}
          <Button type="primary" onClick={submit}>
            Submit
          </Button>
        </React.Fragment>
      )}
      {!quiz && !error.length && <h3>Loading...</h3>}
      {!quiz && error.length && (
        <Empty style={{ margin: "150px 0" }}>
          <div>Opps..</div>
          {error}
        </Empty>
      )}
      {quiz && quizResult && (
        <div className="h-100 d-flex flex-column justify-content-center align-items-center">
          <div className="d-flex flex-column justify-content-center align-items-center mb-3">
            <div>
              {quizResult.correct / quizResult.total > 0.5 ? smile : sad}
            </div>
            <span style={{ fontSize: "1.5rem" }}>
              You answered {quizResult.correct} / {quizResult.total} questions
              correctly
            </span>
          </div>
          <Button type="primary" onClick={clearAll}>
            Retry
          </Button>
        </div>
      )}
    </div>
  );
}

export default Quiz;
